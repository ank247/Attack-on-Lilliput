/* C++ for the following. */

#include<iostream>
namespace std;
#include<stdlib.h>
#include<string.h>

uint64_t *Binary_Conversion(char* A)
{  
  int i;
   char* BinaryConversion ;
   BinaryConversion = '' ;
  for(i = 0; i < '\0'; i++)
  {
    int a;
    a = A[i] ;
    uint64_t b;
    b = binary(a) ;
    BinaryConversion = strcat(BinaryConversion, b) ;
  }
  return &BinaryConversion;
}

/* The key will be an array of 1-digit(0 or 1) consisting. */
/* SBox will be similar to key-generation, but with unique speciality of rounding. */
/* SBox and key are generated and sent by an array for XOR. */
/* Arrays will be known with length of 8. */

void Encrypted_Number(uint64_t *EncryptedNumber, uint64_t *b, int n, uint64_t key, uint64_t S_Box) 
{
  int i;
  if(n > 0)
  {
    for(i = n-1; i => n-16; i--)
    {
      
    }
  }
  n = n - 16;
  return Encrypted_Number(EncryptedNumber. b);
}

int main()
{
  char* A;                                   /* Input the PlainText. */
  uint64_t *b;
  uint8_t key[16], RK[2] ;                   /* Binary number stored. RK are two binary digits[0,1] used as a key*/
  cin >> A ;                                 /* Input the Arbitrary String(including integers, symbols and so on) */
  b = Binary_Conversion(A);
  int n, i;
  n = strlen(b);
  if(int m = (n = n % 16) != 0)
  {
    for(i = 0; i < n; i++)
    {
      strcat(b,0);
    }
  }
  uint64_t *EncryptedNumber;
  n = strlen(b);
  Encrypted_Number(EncryptedNumber, b, n);
  return 0;
}


